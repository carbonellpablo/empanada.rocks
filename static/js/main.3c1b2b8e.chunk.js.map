{"version":3,"sources":["config.tsx","components/Loading/loading.gif","components/Loading/Loading.tsx","App.tsx","index.tsx"],"names":["NFTfactory","address","process","abi","Loading","className","alt","src","loadingGif","getBalance","contract","a","balanceOf","balance","toNumber","getTokenIdByAccount","tokenOfOwnerByIndex","tokenIdByOwnerinHex","isThereSupplyLeft","totalSupply","supplyInHex","supplyInNumber","mint","safeMint","wait","App","useState","tokenId","setTokenId","error","setError","contractInfo","setContractInfo","loading","setLoading","supplyLeft","setSupplyLeft","handleInfoClick","e","preventDefault","provider","ethers","providers","Web3Provider","window","ethereum","request","method","signer","getSigner","Contract","name","symbol","owner","baseURI","leftToMint","info","getAddress","account","prevTokenID","NFTleft","tempTokenId","console","width","height","onClick","getEmpanada","href","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c1b2b8e.chunk.js","sourcesContent":["import contract from './artifacts/contracts/NFTfactory.sol/NFTfactory.json';\nconst { abi }: any = contract;\n\nconst NFTfactory = {\n  address: process.env.REACT_APP_NFT_FACTORY_DEPLOYED_ADDRESS as string,\n  abi,\n};\n\nexport { NFTfactory };\n","export default __webpack_public_path__ + \"static/media/loading.827fdb78.gif\";","import './Loading.css';\nimport loadingGif from './loading.gif';\n\nexport default function Loading(): JSX.Element {\n  return (\n    <div className=\"Loading\">\n      <img alt=\"loading\" src={loadingGif} />\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport './App.css';\nimport { ethers, Contract } from 'ethers';\nimport { NFTfactory } from './config';\nimport Loading from './components/Loading/Loading';\n\nasync function getBalance(\n  address: string,\n  contract: Contract\n): Promise<number> {\n  const balance = await contract.balanceOf(address);\n\n  return balance.toNumber();\n}\n\nasync function getTokenIdByAccount(\n  address: string,\n  contract: Contract\n): Promise<number> {\n  const balance = await getBalance(address, contract);\n\n  if (balance > 0) {\n    const tokenIdByOwnerinHex = await contract.tokenOfOwnerByIndex(address, 0);\n\n    return tokenIdByOwnerinHex.toNumber();\n  }\n\n  return 0;\n}\n\nasync function isThereSupplyLeft(contract: Contract): Promise<boolean> {\n  const supplyInHex = await contract.totalSupply();\n  const supplyInNumber = supplyInHex.toNumber();\n\n  return supplyInNumber < 12;\n}\n\nasync function mint(address: string, contract: Contract): Promise<number> {\n  const safeMint = await contract.safeMint();\n\n  await safeMint.wait();\n\n  return getTokenIdByAccount(address, contract);\n}\n\nfunction App(): JSX.Element {\n  const [tokenId, setTokenId] = useState<number>(0);\n  const [error, setError] = useState<boolean>(false);\n  const [contractInfo, setContractInfo] = useState<any>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [supplyLeft, setSupplyLeft] = useState<boolean>(true);\n  const handleClick = (e: React.FormEvent) => {\n    e.preventDefault();\n    getEmpanada();\n  };\n  const handleInfoClick = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n\n    const signer = provider.getSigner();\n\n    const contract = new ethers.Contract(\n      NFTfactory.address,\n      NFTfactory.abi,\n      signer\n    );\n    const info = {\n      contractInfo: {\n        address: NFTfactory.address,\n        name: await contract.name(),\n        symbol: await contract.symbol(),\n        owner: await contract.owner(),\n        baseURI: await contract.baseURI(),\n        leftToMint: 12 - (await contract.totalSupply()),\n      },\n    };\n\n    setContractInfo(info);\n    setLoading(false);\n  };\n\n  async function getEmpanada() {\n    setLoading(true);\n    try {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n        await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const signer = provider.getSigner();\n\n        const contract = new ethers.Contract(\n          NFTfactory.address,\n          NFTfactory.abi,\n          signer\n        );\n\n        const account = await signer.getAddress();\n\n        const prevTokenID = await getTokenIdByAccount(account, contract);\n        const NFTleft = await isThereSupplyLeft(contract);\n        const tempTokenId =\n          prevTokenID === 0 && NFTleft\n            ? await mint(account, contract)\n            : prevTokenID;\n\n        setSupplyLeft(NFTleft);\n        setTokenId(tempTokenId);\n        setLoading(false);\n      }\n    } catch (e) {\n      setLoading(false);\n      setError(true);\n      //eslint-disable-next-line\n      console.error(e);\n    }\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>empanada.rocks</h1>\n      <h2>An NFT collection featuring 12 empanadas</h2>\n      <img src=\"./base.png\" width=\"400px\" height=\"400px\" />\n\n      {tokenId === 0 && supplyLeft ? (\n        <button onClick={handleClick}>Get your free Empanada!</button>\n      ) : tokenId > 0 ? (\n        <p>\n          Congratulations! You own the Empanada #{tokenId}.\n          <a\n            href={`https://testnets.opensea.io/assets/${NFTfactory.address}/${tokenId}`}\n          >\n            You can check it here\n          </a>\n        </p>\n      ) : (\n        <p>Sorry! there are no empanadas left!</p>\n      )}\n      <button onClick={handleInfoClick}>Print contract info</button>\n      {contractInfo ? <pre>{JSON.stringify(contractInfo, null, 2)}</pre> : null}\n      {error ? (\n        <p>There was an error. Please check the console for details</p>\n      ) : null}\n      <a href=\"https://github.com/carbonellpablo/empanada.rocks\">\n        <h2>Github repository</h2>\n      </a>\n      <div className=\"content\">\n        <p>Only works on desktop, not mobile.</p>\n        <p>You need to have the browser extension Metamask installed.</p>\n        <p>Make sure you are on the &apos;Rinkeby&apos; network.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}